First we have defined an max tree height which would change if we want to change the tree or graph

Than we define an structure by name MinHeapNode and in that we have an character data which stores one of the input characters, than we have unsigned freq which stores the frquency of the characters

Now, the unsigned is the new data type which stores only the positive value, it do not stores the negative value, And in this structure MinHeapNode last comes the structure of its self by the name of the left and right, Which stores the data of the left and right child of this node in the same as that of this structure format

After that comes the structure named MinHeap which stores collection of MinHeap(or huffman tree) nodes, In that we have an unsigned variable size which stores current size of min heap and than another unsigned variable capacity which stores capacity OF min heap and than it also have an array of struct MinHeapNode type, which stores array of struct MinHeapNode

Now, lets come to the main function which have two arrays the one is of the character and the other is of the frquency of that character, than comes the size of the array which can be determined by the variable size and which is equal to the sizeof arr divided by sizeof arr[o], And it calls the huffmanCodes function which is the main processing function of this huffman algorithm and while calling it takes arr, freq and size

Now, lets go to the huffmanCodes function, in it we will create an huffman tree, And in that first step is to create a min heap of capacity equal to the size and inserts all character of data[] in min heap. Intially size of min heap is equal to capacity

Now in it we will first store the MinHeap in the heap memory by the name of the MinHeap, than make the size of MinHeap equals to zero, than capacity of MinHeap equals to its size, And than We will also allocte the memory of the array in the heap memory

Than we will make the new nodes and store it in the array of the MinHeap which we had allocted the space in the heap, And than change the size variable of the MinHeap equal to the size variable of the huffmanCodes function

Than comes the work of storing the frquencies of the characters in the MinHeap''s array in the increasing order, by the help of the for loop and the MinHeapify function

In for loop the i''s value is equals to the (n-1)/2, where the n is equals to MinHeap->size-1, this is beacause the MinHeap is called than it uses the value of before it, we had discussed about it below

The MinHeapify functions take the the struct MinHeap and int idx as the arguments, And in it we first make the integer smallest equal to idx and the left=2*idx+1 and the right=2*idx+2

Than we will check first if the left is smaller than the MinHeap->size and the MinHeap->array[left]->freq smaller than the array[smallest]->freq, if it is than change the smallest''s value to the value of the left

And than we will check if the right is smaller than the MinHeap->size and the MinHeap->array[right]->freq smaller than the array[smallest]->freq, if it is than change the smallest''s value to the value of the right

And than comes the last condition of the function which is if the value of smallest not equals to the value of idx, and if this condition is true than it calls swapMinHeapNode function which takes the arguments the array of the MinHeap''s having the index equals to the smallest, And the MinHeap''s array having the index equals to idx, And this function swaps the each others value and than it again calls the MinHeapify function i.e. itself by giving the MinHeap and smallest variable as the arguments

Than we will make the pointers of the MinHeapNode by the name left, right and top, And than comes the while loop in which we perform two steps step 2 and step 3 and in the 2nd step we will extract the minimum freq items from the heap the first will be stored in the left and the second one will be stored in the right, by the help of the extractMin function which takes the structure MinHeap as the arguments

In the extractMin, we will make a new structure temp which we will store the first value of the array in it, And than in the first index we will store the value of the last index, And will make the size of the MinHeap''s size minus by 1, And than will make the call to the MinHeapify function to make the node arrange in the increasing order of the frequencies

Now comes the next step to create a new internal node with the frequencies equal to the sum of the two nodes frequencies. Make the two extracted node as left and right childrens of this new node, Add this node to the min heap. '$' is a special value for the internal nodes, not used

We will create the new node by the help of the createNewNode function and store in the top ptr and make it''s left equal to the left ptr and it''s right equal to the right ptr, And than we will add the new node to the min heap''s array

Than comes the step 4 and that is to repeat the step 2 and step 3 until the remaning node is the root node, And than make the new pointer of the MinHeapNode by the name of the root and init we will store the node that comes after using the extractMin function for the MinHeap,i.e. the only one lefted node will come, And than we will print huffman codes using the huffman tree built above by the help of the printCodes function which will take root, arr, top as the arguments

And comes the last and final function which is the printCodes function, And init by the help of the if statmets we will genrate the unique code for each of the node or character and print it,if The first condition is true  than make the 0 in the array and than again recursively call the printCodes function for the root->left and the top+1,Than we have the another if loop which will run when the root would have the right node and does not have the left node and in it we will store the 1 in the array and than will recursively call the printCodes again with the root->right and the top+1

And if there is no connections to that node, than it will be leaf node and if it is than print the data and than code

NOTE:
If the graph is changed than we also have to change the value of the arr and freq